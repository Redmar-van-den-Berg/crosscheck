- name: dry-run-vanilla
  tags:
    - dry-run
  command: >
    snakemake
      --dryrun
      --reason
      --printshellcmds
      --config pepfile=tests/pep/vanilla/project_config.yaml
      --snakefile Snakefile
  exit_code: 0
  stdout:
    contains:
      # Test if the picard command line string is created properly
      - 'INPUT=tests/data/micro.vcf.gz INPUT=tests/data/micro.vcf.gz'
      # Test if the haplotype map file from the config is included
      - 'HAPLOTYPE_MAP=tests/data/haplotype.map'
      # Test if we convert the crosscheck file to json
      - '--crosscheck sample1/crosscheck.txt'

- name: dry-run-two-samples
  tags:
    - dry-run
  command: >
    snakemake
      --dryrun
      --reason
      --printshellcmds
      --config pepfile=tests/pep/two-samples/project_config.yaml
      --snakefile Snakefile
  exit_code: 0
  stdout:
    contains:
      # Test if we convert the crosscheck file to json for both samples
      - '--crosscheck sample1/crosscheck.txt'
      - '--crosscheck sample2/crosscheck.txt'

- name: dry-run-with-array
  tags:
    - dry-run
  command: >
    snakemake
      --dryrun
      --reason
      --printshellcmds
      --config pepfile=tests/pep/with-array/project_config.yaml
      --snakefile Snakefile
  exit_code: 0
  stdout:
    contains_regex:
      # Test if array-as-vcf is executed for sample1
      - 'aav .* sample1/array.vcf.gz'
      # Test if the converted array file is passed to picard crosscheck
      - 'picard CrosscheckFingerprints .* INPUT=sample1/array.vcf.gz .* OUTPUT=sample1/crosscheck.txt'
    must_not_contain_regex:
      # Test if array-as-vcf is not executed for sample2
      - 'aav .* sample2/array.vcf.gz'
